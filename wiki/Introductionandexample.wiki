#summary One-sentence summary of this page.
#labels hbase,orm,nosql

= Introduction =

*ORM-HBase*

This is simple orm for HBase, the project includes several parts:

*DataMapper*

According to PoEAA, domain object knows nothing about Data Mapper, but mapper knows the domain object. Actually data mapper is designed for specific objet including functions to access databases. 

*From PoEAA*
Here, the ORM-HBase is designed based on the model, but make it more general. We specify the mapping from object’s fields to HBase schema through annotation, and design a general DataMapper based on generic data type (with annotations).

*Object Beans*
Make sure the object has an empty construction function with no parameters and getter&setter functions for each member variable;

*Dao:*
User does not need to call Create() function of DataMapperFactory nor need to know anything about DataMapper’s functions. Only need to use Dao to do CRUD.

---------------------------------------


= Details =

*Bean*
package com.wlu.orm.hbase.tests;

import com.wlu.orm.hbase.annotation.DatabaseField;
import com.wlu.orm.hbase.annotation.DatabaseTable;

@DatabaseTable(tableName = "ResumeArchive")
public class Resume {
	@DatabaseField(id = true)
	String id;
	@DatabaseField(familyName = "resume_title", qualifierName = "resume_title")
	String resume_title;
	@DatabaseField(familyName = "user_basic_information")
	Resume_BasicInfo basicInfo;
	@DatabaseField(familyName = "user_education")
	Resume_Education education;
	@DatabaseField(familyName = "user_work_experience")
	Resume_WorkExperience workExperience;

	public Resume() {
		super();
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getResume_title() {
		return resume_title;
	}

	public void setResume_title(String resume_title) {
		this.resume_title = resume_title;
	}

	public Resume_BasicInfo getBasicInfo() {
		return basicInfo;
	}

	public void setBasicInfo(Resume_BasicInfo basicInfo) {
		this.basicInfo = basicInfo;
	}

	public Resume_Education getEducation() {
		return education;
	}

	public void setEducation(Resume_Education education) {
		this.education = education;
	}

	public Resume_WorkExperience getWorkExperience() {
		return workExperience;
	}

	public void setWorkExperience(Resume_WorkExperience workExperience) {
		this.workExperience = workExperience;
	}

	@Override
	public String toString() {
		return "Resume [id=" + id + "\n resume_title=" + resume_title
				+ "\n basicInfo=" + basicInfo + "\n education=" + education
				+ "\n workExperience=" + workExperience + "]";
	}

}


*Test Case*
package com.wlu.orm.hbase.tests;

import java.util.ArrayList;
import java.util.List;


import com.wlu.orm.hbase.connection.HBaseConnection;
import com.wlu.orm.hbase.dao.Dao;
import com.wlu.orm.hbase.dao.DaoImpl;
import com.wlu.orm.hbase.exceptions.HBaseOrmException;
import com.wlu.orm.hbase.schema.value.ValueFactory;

import junit.framework.TestCase;

public class ResumeTest extends TestCase {

	static HBaseConnection hbaseconnection = null;
	static Dao<Resume> dao = null;
	static {
		hbaseconnection = new HBaseConnection("wlu-hadoop01", "2181", 10);
		try {
			dao = new DaoImpl<Resume>(Resume.class, hbaseconnection);
		} catch (HBaseOrmException e) {
			e.printStackTrace();
		}
	}

	public void testCreateTable() {
		dao.CreateTableIfNotExist();
	}

	public void testInsert() {
		Resume_BasicInfo jacky_b = new Resume_BasicInfo();
		jacky_b.setSecond_Name("Jacky");
		jacky_b.setFirst_Name("Chen");
		jacky_b.setGender("Male");
		jacky_b.setData_of_Birth("1980-1-1");
		jacky_b.setEmail("jacky@sun.com");
		jacky_b.setResidency("DC");
		jacky_b.setYrs_of_Experience("5");

		Resume_Education jacky_e = new Resume_Education();
		jacky_e.setTime_period("2000-6");
		jacky_e.setSchool("Uta University");
		jacky_e.setDegree("Master");
		jacky_e.setMajor("Electronic Enginnering");

		Resume_WorkExperience jacky_w = new Resume_WorkExperience();
		jacky_w.setTime_period("2006-3");
		jacky_w.setCompany("Sun corp.");
		jacky_w.setJobTitle("Software Enginner");
		jacky_w.setDepartment("Data Service Team");
		jacky_w.setDescription("I worked here for about 6 years and know a lot about ...");

		Resume jacky = new Resume();
		jacky.setId("00000001234");
		jacky.setResume_title("Jacky's Personal Resume");
		jacky.setBasicInfo(jacky_b);
		jacky.setEducation(jacky_e);
		jacky.setWorkExperience(jacky_w);

		dao.Insert(jacky);

	}

	public void testQuery() {
		Resume jacky = dao.QueryById(ValueFactory.TypeCreate("00000001234"));
		System.out.println(jacky);
	}

	public void testUpdate() {
		Resume jacky = dao.QueryById(ValueFactory.TypeCreate("00000001234"));
		System.out.println(jacky);
		jacky.getBasicInfo().setTelephone_number("010045087");
		jacky.getBasicInfo()
				.setResidency("Wen er Road, #391, Hangzhou, China.");
		jacky.getWorkExperience().setJobTitle("Senior Software Enginner");
		List<String> fl = new ArrayList<String>();
		fl.add("basicInfo");
		fl.add("workExperience");

		dao.Update(jacky, fl);
		System.out.println(jacky);
	}
	
	public void testDelete(){
		dao.DeleteById(ValueFactory.TypeCreate("00000001234"));
	}
}


